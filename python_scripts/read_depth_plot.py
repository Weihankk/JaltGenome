#!/usr/bin/env python
"""This script is to plot the read depth on a specific region (the output generated by 
samtools depth ...) using a 500-bp windows 
"""

import argparse, re
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from pylab import *


def depth_window(infile, window_size):
	window, depth = [], []
	n, depth_sum = 0, 0
	
	for line in infile:
		cur_depth = int(line.split('\t')[2])
	
		if n % window_size == 0 and n > 0:
			window.append(n-window_size)
			depth.append(float(depth_sum)/window_size)
			depth_sum = 0
		
		n += 1 
		depth_sum += cur_depth
		
	return window, depth


def investigated_region(scaffod_id):
	if scaffod_id == 'scf29960':
		## J.sinuosa scf29960 
		#fill([169258,192641,192641,169258], [0,0,600,600], 'b', alpha=0.2, edgecolor='r')
		#fill([203929,222712,222712,203929], [0,0,600,600], 'b', alpha=0.2, edgecolor='r')
		#fill([249055,258384,258384,249055], [0,0,600,600], 'b', alpha=0.2, edgecolor='r')
		#fill([261962,263434,263434,261962], [0,0,600,600], 'b', alpha=0.2, edgecolor='r')
		fill([168404,173482,173482,168404], [0,0,600,600], 'b', alpha=0.2, edgecolor='r')
		fill([177503,183490,183490,177503], [0,0,600,600], 'b', alpha=0.2, edgecolor='r')
		fill([216631,222712,222712,216631], [0,0,600,600], 'b', alpha=0.2, edgecolor='r')
		fill([235948,238067,238067,235948], [0,0,600,600], 'b', alpha=0.2, edgecolor='r')
		fill([249109,255182,255182,249109], [0,0,600,600], 'b', alpha=0.2, edgecolor='r')

	elif scaffod_id == 'scf31961':
		fill([40656,46606,46606,40656], [0,0,600,600], 'b', alpha=0.2, edgecolor='r')
		#fill([50920,56021,56021,50920], [0,0,600,600], 'b', alpha=0.2, edgecolor='r')
		fill([86327,91896,91896,86327], [0,0,600,600], 'b', alpha=0.2, edgecolor='r')

def main():
	parser = argparse.ArgumentParser(prog="read_depth_plot.py", description=__doc__,
	formatter_class=argparse.ArgumentDefaultsHelpFormatter)
	parser.add_argument('-i', '--infile', \
	help=("the output generated by samtools depth"), required=True)
	parser.add_argument('-o', '--output', \
	help=("the name of output image"), required=True)
	parser.add_argument('-w', '--window_size', \
	help=("window size (default=1kb)"), default=500)
	args = parser.parse_args()
	
	infile = open(args.infile, "r")
	window_size = int(args.window_size)
	output = args.output
	
	window, depth = depth_window(infile, window_size)
	filename="read_depth.jpg"
	plt.scatter(window, depth)
	#investigated_region('scf31961')
	investigated_region('scf29960')
	plt.xlabel('Relative Position')
	plt.ylabel('Read Depth')
	
	plt.savefig(output)
	infile.close()



if __name__ == "__main__":
	main()
	
	