#!/usr/bin/env python
"""This script is to parse the output from orthoMCL program, in order to 
count the shared or lineage-specific genes and then plot a venn diagram 
using the python script from https://github.com/tctianchi/pyvenn. .

For example, I tested gene family evolution in a representative 
species in each of five genus of Solanaceae by using command: 
python gene_cluster.py -i mclOutput -s sinuosa lycopersicum 
annuum attenuata axillaris 
"""

import argparse, itertools
import matplotlib
matplotlib.use('Agg')
import venn


class gene_family_comprs:
	"""showing unique and shared gene families among species by
	parsing the output from orthomcl program"""
	
	def __init__(self, species_list):
		species_dict = {}	
		for x in xrange(len(species_list)):
			temp = list(itertools.combinations(species_list, x+1))
			for y in xrange(len(temp)):
				species_dict[temp[y]] = 0
		self.data = species_dict
		self.ids = species_list
	
	def uniq_share_cal(self, infile):
		for line in infile:
			s = line.rstrip()
			orths = list(s.split('\t'))
			ids = []
			for x in xrange(len(orths)):
				item = orths[x].split('|')[0] 
				if item in self.ids: 
					ids.append(item)
			target = set(ids)
			for key in self.data:
				if set(key) == target:
					 self.data[key] += 1
		
		labels = {}
		for key in self.data:
			key2 = ''
			for x in xrange(len(self.ids)):
				if self.ids[x] in key:
					key2 += '1'
				else:
					key2 += '0'
			labels[key2] = self.data[key]
		
		if len(self.ids) == 3:
			fig, ax = venn.venn3(labels, names=self.ids)
			fig.savefig('gene_family_3taxa.pdf')
			
		elif len(self.ids) == 4:
			fig, ax = venn.venn4(labels, names=self.ids)
			fig.savefig('gene_family_4taxa.pdf')
			
		elif len(self.ids) == 5:
			fig, ax = venn.venn5(labels, names=self.ids)
			fig.savefig('gene_family_5taxa.pdf')
		
		elif len(self.ids) == 6:
			fig, ax = venn.venn6(labels, names=self.ids)
			fig.savefig('gene_family_6taxa.pdf')



def main():
	parser = argparse.ArgumentParser(prog="gene_cluster.py", description=__doc__,
	formatter_class=argparse.ArgumentDefaultsHelpFormatter)
	parser.add_argument('-i', '--infile', \
	help=("the output generated by orthoMCL"), required=True)
	parser.add_argument('-s', '--species', \
	help=("species names for venn diagram, splitted by space"), nargs='*',required=True)
	args = parser.parse_args()
	
	infile = open(args.infile, "r")
	species = list(args.species)
	
	mydata = gene_family_comprs(species)
	output = mydata.uniq_share_cal(infile)	
	infile.close()



if __name__ == "__main__":
	main()
	
	
	