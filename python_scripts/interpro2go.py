#!/usr/bin/env python
"""This script is to assign GO terms to genes based on their protein domains predicted 
by InterProScan 
"""

import argparse, re


def parse_interpro2go(interpro2go):
	pro2go_dict = {}
	with open(interpro2go, "r") as infile:
		for line in infile:
			line = line.rstrip()
			if line.startswith("InterPro"):
				domain = (line.split(' ')[0]).split(':')[1]
				goterm = line.split(' ')[-1]
				
				if domain not in pro2go_dict:
					pro2go_dict[domain] = goterm
				else:
					pro2go_dict[domain] += ','+goterm
	return pro2go_dict


def assign_go(infile, pro2go_dict):
	p = re.compile('^IPR[0-9]+')
	with open(infile, "r") as handle:
		for line in handle:
			line = line.rstrip()
			if len(line.split('\t')) < 5: 
				print line
				continue
			interpro = line.split('\t')[4]
			#print interpro
			domains = interpro.split(', ')
			#print domains
			domain_ids = [p.findall(x) for x in domains]
			domain_ids = [x[0] for x in domain_ids if x != []]
			
			go_terms = ''
			for item in domain_ids:
				for domain in pro2go_dict:
					if item == domain:
						if go_terms == '':
							go_terms = pro2go_dict[domain]
						else:
							go_terms += ','+pro2go_dict[domain]
			print line + '\t' + go_terms
	
	
def main():
	parser = argparse.ArgumentParser(prog="interpro2go.py", description=__doc__,
	formatter_class=argparse.ArgumentDefaultsHelpFormatter)
	parser.add_argument('-i', '--infile', \
	help=("the output generated by AHDR"), required=True)
	parser.add_argument('-g', '--interpro2go', \
	help=("interpro2go file"), required=True)
	args = parser.parse_args()
	
	pro2go_dict = parse_interpro2go(args.interpro2go)
	assign_go(args.infile, pro2go_dict)



if __name__ == "__main__":
	main()
	
	